<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[分而治之]]></title>
      <url>https://danvane.github.io/2017/02/22/Divide-and-conquer/</url>
      <content type="html"><![CDATA[<p><strong>分而治之（divide-and-conquer）</strong>策略就是要把一个问题划分为若干较小的子问题（通常具有相同或相关的类型，理想情况下规模也大致一样），然后各个击破，最后在必要时把子问题的解组合起来，就得到了原始问题的解。但是，能够采用分而治之求解的谜题并不多。</p>
<h3 id="三格骨牌谜题"><a href="#三格骨牌谜题" class="headerlink" title="三格骨牌谜题"></a>三格骨牌谜题</h3><p>使用适当的三格骨牌来覆盖一块缺了一个的\( 2^n * 2^n\)棋盘。所谓三格骨牌就是L形的相邻三格。棋盘上缺的可以是任何一格。三格骨牌必须覆盖除缺格外的全部其它格，且不能有重叠。</p>
<p><img src="/2017/02/22/Divide-and-conquer/dc.PNG" alt=""></p>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code>private void startDC(int[] start) {

    int step = start[2];
    if (step == 2) {
        if (checkerboard[start[0]][start[1]] == 1) {
            checkerboard[start[0]][start[1]] = flag;
        }
        if (checkerboard[start[0] + 1][start[1]] == 1) {
            checkerboard[start[0] + 1][start[1]] = flag;
        }
        if (checkerboard[start[0]][start[1] + 1] == 1) {
            checkerboard[start[0]][start[1] + 1] = flag;
        }
        if (checkerboard[start[0] + 1][start[1] + 1] == 1) {
            checkerboard[start[0] + 1][start[1] + 1] = flag;
        }
        flag++;
    } else {
        paint_checkerboard(start);
        List&lt;int[]&gt; start_numbers = new ArrayList&lt;int[]&gt;();
        start_numbers.add(new int[]{start[0], start[1], step/2});
        start_numbers.add(new int[]{start[0] + step / 2, start[1], step/2});
        start_numbers.add(new int[]{start[0], start[1] + step / 2, step/2});
        start_numbers.add(new int[]{start[0] + step / 2, start[1] + step / 2, step/2});
        for (int i = 0; i &lt; start_numbers.size(); i++) {
            startDC(start_numbers.get(i));
        }
    }
}
</code></pre><p><a href="https://github.com/DanVane/Algorithms/blob/master/Divide_and_Conquer.java" target="_blank" rel="external">源码</a></p>
<p>该谜题采用递归的分而治之求解。如上图所示，先在棋盘中央放置一块三格骨牌，这样规模为n的问题就变成了各自规模为n-1的四个相同问题。党每个缺了一个的2*2的区域都被算法生成的一块三格骨牌所覆盖时。算法终止。</p>
<p>大多数分治算法都采用递归求解较小规模的子问题。特别地，有些谜题的子问题未必是相同问题的较小谜面。</p>
<h3 id="2n筹码问题"><a href="#2n筹码问题" class="headerlink" title="2n筹码问题"></a>2n筹码问题</h3><p>对于任意数值n&gt;1，放置2n个筹码在n*n的棋盘上，要求在同行、同列以及同对角线上的筹码个数不超过2个。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><a href="">源码</a></p>
<h3 id="直三格板铺陈"><a href="#直三格板铺陈" class="headerlink" title="直三格板铺陈"></a>直三格板铺陈</h3><p>一个直三格板是一个\(3<em> 1\)的瓦片平铺。很显然，只要n能够被3整除，任何人都能够通过直三格板平铺成一个\(n</em> n\)的正方形。那么。对于一个大于3又不能被3整除的n来说，是否能够利用直三格板和一个叫做单格板的\(1<em> 1\)瓦片平铺，来构成一个\(n</em> n\)的正方形呢？如果可以的话，请解释如何做；如果不行的话，请解释为什么。</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>减而治之和分而治之的区别在于<em>每一步需要解决的子问题个数</em>：分治算法每一步需要解决多个子问题，而减治算法仅需要解决一个。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[减而治之]]></title>
      <url>https://danvane.github.io/2017/02/21/Decrease-and-Conquer/</url>
      <content type="html"><![CDATA[<p><em>减而治之(decrease-and-conquer)</em>策略的基础，在于从给定问题的解及其较小规模谜面的解之间找到某种关系。一旦找到，这样的关系就可以自然而然地导向某种<em>递归算法(recursive algorithm)</em>，它可以将问题减少为一系列的、规模越来越小的谜面，直至可以一下子解决为止。</p>
<h3 id="士兵摆渡"><a href="#士兵摆渡" class="headerlink" title="士兵摆渡"></a>士兵摆渡</h3><p>25个士兵组成的小分队需要渡河，可是河宽且水深，周围也看不到桥。他们发现岸边有一个小船，两个12岁的男孩正在上面玩耍。船很小，只能承载两个男孩或一个士兵的重量。士兵应怎样渡河？在你的算法中，船从一个岸边到另一个岸边来回共计几次？<br><a id="more"></a></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre>
<code>
private void startDC(int fs, int fc) {
        set_step(fs, fc);
        if (--fs != 0) {
            startDC(fs, fc);
        }
    }

    private void set_step(int fs, int fc) {
        String str = "fs:" + fs + ", fc:" + 2 + "----" + "ss:" + (25 - fs) + ", sc:" + 0;
        step.add(str);
        str = "fs:" + fs + ", fc:" + 0 + "----" + "ss:" + (25 - fs) + ", sc:" + 2;
        step.add(str);
        str = "fs:" + fs + ", fc:" + 1 + "----" + "ss:" + (25 - fs) + ", sc:" + 1;
        step.add(str);
        str = "fs:" + --fs + ", fc:" + 1 + "----" + "ss:" + (25 - fs) + ", sc:" + 1;
        step.add(str);
        if (fs == 1) {
            str = "fs:" + fs + ", fc:" + 2 + "----" + "ss:" + (25 - fs) + ", sc:" + 0;
            step.add(str);
        }
    }
</code>
</pre>

<p><a href="https://github.com/DanVane/Algorithms/blob/master/Decrease_and_conquer.java" target="_blank" rel="external">源码</a></p>
<p>一般的，采用减而治之求解时，较小谜面的规模未必是n-1。尽管每次减1是减少规模最常见的情况，减少幅度更大的例子也是有的。如果在每次迭代时，把弥漫降低一个常数因子，例如减半，那算法就会很快。如果某个算法能以更大的因子来减少谜面规模的话，那还会更快。<em>每次减少常数因子（decrease-by-constant-factor）</em></p>
<h3 id="硬币中的假币"><a href="#硬币中的假币" class="headerlink" title="硬币中的假币"></a>硬币中的假币</h3><p>有8枚外观完全一致的硬币，其中的一枚是假币，并且知道假币要比真币轻一些，可以使用天平但不能用砝码，问最少称几次才能把假币辨别出来？</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre><code>private void weight_Coins(List&lt;Integer&gt; coins) {
    int first_split = (coins.size()+1)/3;
    int sec_split = 2*first_split;
    int sum_1 = 0;
    int sum_2 =0;
    for(int i=0;i&lt;coins.size();i++){
        if(i&lt;first_split){
            sum_1 += coins.get(i);
        }else if(i&lt;sec_split){
            sum_2+=coins.get(i);
        }else{
            break;
        }
    }
    if(sum_1==sum_2){
        //第三段
        if(coins.size()-sec_split==1){
            steps.add(coins.toString()+&quot; the third&quot;);
            return ;
        }
        String str = &quot;Split &quot;+coins.toString()+&quot; to 3 segs(&quot;+first_split+&quot;,&quot;
                +first_split+&quot;,&quot;+(coins.size()-sec_split)+&quot;), choose the third&quot;;
        steps.add(str);
        List&lt;Integer&gt; sub_coins = new ArrayList&lt;Integer&gt;();
        for(int i=sec_split;i&lt;coins.size();i++){
            sub_coins.add(coins.get(i));
        }
        weight_Coins(sub_coins);
    }else if(sum_1&lt;sum_2){
        //第一段
        if(first_split==1){
            steps.add(coins.toString()+&quot; the first&quot;);
            return;
        }
        String str = &quot;Split &quot;+coins.toString()+&quot; to 3 segs(&quot;+first_split+&quot;,&quot;
                +first_split+&quot;,&quot;+(coins.size()-sec_split)+&quot;), choose the first&quot;;
        steps.add(str);
        List&lt;Integer&gt; sub_coins = new ArrayList&lt;Integer&gt;();
        for(int i=0;i&lt;first_split;i++){
            sub_coins.add(coins.get(i));
        }
        weight_Coins(sub_coins);
    }else{
        // 第二段
        if(sec_split-first_split==1){
            steps.add(coins.toString()+&quot; the second&quot;);
            return;
        }
        String str = &quot;Split &quot;+coins.toString()+&quot; to 3 segs(&quot;+first_split+&quot;,&quot;
                +first_split+&quot;,&quot;+(coins.size()-sec_split)+&quot;), choose the second&quot;;
        steps.add(str);
        List&lt;Integer&gt; sub_coins = new ArrayList&lt;Integer&gt;();
        for(int i=first_split;i&lt;sec_split;i++){
            sub_coins.add(coins.get(i));
        }
        weight_Coins(sub_coins);
    }
}
</code></pre><p><a href="https://github.com/DanVane/Algorithms/blob/master/Decrease_by_Constant_Factor.java" target="_blank" rel="external">源码</a></p>
<p>有时通过自底向上的方法来发掘较大和较小问题之间的关系，可能会更简单。先把谜题的最小规模谜面接触，然后再看第二小的，以此类推。这种方法有时称为<em>增量法（incremental approach）</em>。</p>
<h3 id="矩形切割"><a href="#矩形切割" class="headerlink" title="矩形切割"></a>矩形切割</h3><p>找出所有将一个矩形分成n个直角三角形的方法（n&gt;1）。并且将这种切割方法归纳为一个算法。</p>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><pre><code>Input: 矩阵M，直角三角形个数n（n&gt;1）. 
Output:
Algorithm:
    1. 已有的直角三角形个数m=0 
    2. 用对角线l划分矩阵M，记录该对角线所对的一个端点A
    3. m=2
    4. repeat：
        1. if(n==m)
            1. exit
        2. 从A作l的垂线
        3. 更新A为该垂线和l的交点，更新l为A所对的直角三角形的斜边
        4. ++m    
</code></pre><p>参见《算法谜题》1.1.3</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow生成TFRecords]]></title>
      <url>https://danvane.github.io/2017/02/17/Tensorflow%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E4%B9%8BTFRecords/</url>
      <content type="html"><![CDATA[<h2 id="tensorflow内定标准格式TFRecords"><a href="#tensorflow内定标准格式TFRecords" class="headerlink" title="tensorflow内定标准格式TFRecords"></a>tensorflow内定标准格式TFRecords</h2><p>TFrecords是一种二进制文件，能更好地利用内存，也方便复制和移动。</p>
<p>TFRecords文件包含了tf.train.Example协议内存块(protocol buffer，包含了字段 Features)。我们可以将数据填入到Example协议内存块，将协议内存块序列化为一个字符串，并且通过tf.python_io.TFRecordWriter 写入到TFRecords文件。</p>
<p>从<a href="http://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="external">Cifar</a>官网上下载cifar10的mat文件，解压。<br><a id="more"></a></p>
<pre>
<code>
# -*- coding: utf-8 -*
import tensorflow as tf
import os
import scipy.io as sio
import numpy as np
import csv

matfn1 = 'data_batch_1.mat'
matfn2 = 'data_batch_2.mat'
matfn3 = 'data_batch_3.mat'
matfn4 = 'data_batch_4.mat'
matfn5 = 'data_batch_5.mat'
matfn = [matfn1, matfn2, matfn3, matfn4, matfn5]

def generate_tfrecords(input_filename, output_filename):
    print("Start to convert {} to {}".format(input_filename, output_filename))
    writer = tf.python_io.TFRecordWriter(output_filename)
    csv_reader = csv.reader(open(input_filename))
    for r in csv_reader:
        features = [float(k) for k in r[:-1]]
        label = float(r[-1])
        example = tf.train.Example(features=tf.train.Features(feature={
            "label":
            tf.train.Feature(float_list=tf.train.FloatList(value=[label])),
            "features":
            tf.train.Feature(float_list=tf.train.FloatList(value=features)),
        }))
        writer.write(example.SerializeToString())
    writer.close()
    print("Successfully convert {} to {}".format(input_filename,
                                               output_filename))

def generate_csv(input_filename, output_filename):
    csvfile = file(output_filename, "wb")
    writer = csv.writer(csvfile)
    print("start generating csv from mat")
    matfile = sio.loadmat(input_filename)
    data = matfile['data']
    label = matfile['labels']
    all_data = np.concatenate([data,label],axis=1)
    writer.writerows(all_data)
    csvfile.close()

def merge_csv():
    output_filename = os.getcwd() + '/' + 'cifar10_train.csv'
    csvfile = file(output_filename, "wb")
    writer = csv.writer(csvfile)
    print("Start merging csv")
    for filename in matfn:
        input_filename = os.getcwd() + '/' + filename.replace('mat', 'csv')
        csv_reader = csv.reader(open(input_filename))
        for line in csv_reader:
            writer.writerow(line)
    csvfile.close()
    for filename in matfn:
        csv_filename = os.getcwd() + '/' +filename.replace('mat', 'csv')
        os.remove(csv_filename)

def main():
    current_path = os.getcwd()
    for filename in matfn:
        input_filename = current_path + '/' + filename
        output_filename = current_path+ '/' + filename.replace('mat', 'csv')
        generate_csv(input_filename, output_filename)

    merge_csv()
    input_filename = current_path + '/' + 'test_batch.mat'
    output_filename = current_path + '/' + 'cifar10_test.csv'
    generate_csv(input_filename, output_filename)
    for filename in os.listdir(current_path):
        print filename
        if filename.endswith('csv'):
            input_filename = current_path + '/' + filename
            output_filename = current_path + '/' + filename.replace('csv','tfrecords')
            generate_tfrecords(input_filename, output_filename)

if __name__ == "__main__":
    main()
</code>
</pre>


<p>其实从mat文件能直接生成tfrecords文件。只是笔者第一次接触tfrecords，没有意识到。<br>如果想直接使用mat文件，在generate_tfrecords函数中填入features和label数据。features对应mat中data的一行数据，label即是mat的对应的一个数字。即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[回溯 backtracking]]></title>
      <url>https://danvane.github.io/2017/02/15/backtracking/</url>
      <content type="html"><![CDATA[<p>回溯法是对穷举搜索所采取的蛮力做法的一种重要改进。其核心在于，采用一次添加一个组件的方法来构造解，并且按照以下思想评估可能解的“半成品”：</p>
<p><strong>如果这个构造一般的解可以再向前推进一步而不违反题设的约束，则选择第一个合法选项作为下一个部件。如果找不到合法选项作为下一个部件，那么就不再需要去考虑任何其余部件了。在这种情况下，算法执行回溯，把当前构造到一半的解的最后一个部件替换成该部件可选的下一个合法选项。</strong></p>
<p>一般，回溯法能避免生成不必要的可能解。但在最坏情况下，某个回溯算法可能与穷举搜索一样，最终生成了所有可能解，这种情况很罕见。</p>
<a id="more"></a>
<h2 id="状态空间树-state-space-tree"><a href="#状态空间树-state-space-tree" class="headerlink" title="状态空间树 state-space tree"></a>状态空间树 state-space tree</h2><p>根节点放在第0层，对应解构造过程的出发点。根节点的第1层子节点对应于解的第一个部件的可能选择。第2层子节点对应于第二个部件的可能选择，以此类推。</p>
<p>状态空间树的叶子节点有两种可能的类型：</p>
<ol>
<li><strong>无望节点（nonpromising node）</strong> ，也叫死路节点（dead node）。这种节点对应那些不可能达成解的“半成品”。一旦构造出无望节点，回溯算法就会中止该节点（剪枝），然后回溯至无望节点的父节点，并考虑该部件的下一个选项。</li>
<li><strong>解节点</strong>。如果搜到一个解，算法就会终止。如果还需要搜索其他解，则算法回溯到叶节点的父节点，继续搜索。</li>
</ol>
<h2 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h2><p>将n个皇后放置在n*n的国际象棋棋盘上，其中没有任何两个皇后处于同一行、同一列或同一对角线上，以使得它们不能相互攻击。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>在 n=1 的情况下，该问题有平凡解。而在 n=2 和 n=3 的情况下，该问题无解。考虑 n=4，由于每个皇后都要放到它独占的列上去，我们只需把每个皇后分配到行上就行了。</p>
<h3 id="回溯法代码"><a href="#回溯法代码" class="headerlink" title="回溯法代码"></a>回溯法代码</h3><pre>
<code>
private void backtracking_argo(CState c_state) {
        int already_queen = c_state.get_already_state();
        boolean success_flag = true;
        int n = c_state.get_state().length;
        save_current_state(c_state); //当前状态压栈
        CState temp_state = c_state.clone();
        for (int i = 0; i < n; i++) { //第already_queen行，第i列
            temp_state = c_state.clone();
            temp_state.set_c_state(already_queen, i);
            if (judge_reasonable(temp_state)) { //不冲突
                if (temp_state.get_already_state() == temp_state.get_state().length) { //解节点
                    state_successful.add(temp_state);
                    //寻找下一解
                    continue;
                }// 放置下一个皇后
                backtracking_argo((CState) temp_state.clone());
            } else if (i == n - 1) {    //无望节点，循环完毕，父节点无用；若循环未结束，则寻找下一位置
                success_flag = false;
            }
        }
        if (!success_flag) { //栈顶节点无用，出栈
            if (state_ancestors.size() > 0) {
                state_ancestors.remove(state_ancestors.size() - 1);
            }
        }
    }
</code>
</pre>


<p><a href="https://github.com/DanVane/Algorithms/blob/master/Backtrack.java" target="_blank" rel="external">源码</a></p>
<h2 id="回溯法-VS-穷举搜索"><a href="#回溯法-VS-穷举搜索" class="headerlink" title="回溯法 VS 穷举搜索"></a>回溯法 VS 穷举搜索</h2><p>参见《算法谜题》1.1.2 回溯法</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[穷举 Exhaustive search]]></title>
      <url>https://danvane.github.io/2017/02/14/%E7%A9%B7%E4%B8%BE/</url>
      <content type="html"><![CDATA[<p>穷举搜索会直截了当地试遍所有可能借，直到找到问题的解。很少需要人工计算，基本上是为计算机准备的。<br>最大局限在于它的效率低下：通常，如果可能解的数量随着问题规模而呈指数增长或更快的话，那么这种途径并不可取。</p>

<h3 id="幻方："><a href="#幻方：" class="headerlink" title="幻方："></a>幻方：</h3><p>试将1~9这9个不同整数填入一个3*3的表格，使得每行、每列一级每条对角线上的数字之和相同。</p>

<a id="more"></a>
<p><img src="/2017/02/14/穷举/exhaustivity.PNG" alt=""></p>
<h3 id="穷举"><a href="#穷举" class="headerlink" title="穷举"></a>穷举</h3><pre>
<code>
    private int[] get_Res(int[] res) {
        // if no_change, return null;
        int l_flag = 0;
        int r_flag = res.length - 1;
        for (; r_flag > 0; r_flag--) {  //从右向左，寻找要交换的位置1
            if (res[r_flag] > res[r_flag - 1]) {
                break;
            }
        }
        if (r_flag == 0) {
            res = new int[0];
            return res;
        }
        r_flag--;
        for (l_flag = res.length - 1; l_flag > r_flag; l_flag--) {    //在位置1右边，从右向左，寻找要交换的位置2
            if (res[l_flag] > res[r_flag]) {
                break;
            }
        }
        //交换位置1和位置2
        res = swap(res, r_flag, l_flag);
        //把位置1后边的所有位反位排序
        for (int i = r_flag + 1, j = res.length - 1; i < j; i++, j--) {
            res = swap(res, i, j);
        }
        return res;
    }
</code>
</pre>

 <p>把每个排序看做一个自然数，则所有排列对应的数可按从小到大的顺序排列，从当前的排列产生下一个排列时则必然造成某一位置上的数字变大，这一位置显然应该尽量靠右，并且在它左边位置上的数字保持不变。这就意味着这一位置变成的数字来自于它的右边，并且变大的幅度要尽可能小，也就是说在它右边如有几个数同时比它大，应该用其中最小的来代替它。由于这一位置是满足上述条件的最右边的一位，所以在它右边的所有数字按逆序排列，即在这些数字的右边没有一个大于它的数.程序中先从右至左找到第一个位置,该位置上的数比它右边的数小，这个位置就是所要找的满足上述条件的位置, 然后再从右到左找到第一个比该位置上的数字大的数字所在的位置,将这两个位置上的数字交换,再将该位置右边的所有元素颠倒过来,即将它们按从小到大的顺序排列,就得到了下一个排列.</p> 

<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><pre><code>private void recursion_algo(int max, int min, int size) {
    if (max - min + 1 != size * size) {
        System.out.println(&quot;not correct numbers!!!&quot;);
        return;
    }
    List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();
    List&lt;Integer&gt; re = new ArrayList&lt;Integer&gt;();
    for (int i = min; i &lt;= max; i++) {
        res.add(i);
    }
    res = recursion(res, re);

}

private List&lt;Integer&gt; recursion(List&lt;Integer&gt; res, List&lt;Integer&gt; re) {
    if (res.size() == 1) {
        re.add(res.get(0));
        System.out.println(re.toString());
        re.remove(re.size() - 1);
    } else {
        for (int i = 0; i &lt; res.size(); i++) {
            re.add(res.get(i));
            List&lt;Integer&gt; tmp_res = new ArrayList&lt;Integer&gt;();
            for (Integer num : res) {
                tmp_res.add(num);

            }
            tmp_res.remove(i);
            recursion(tmp_res, re);
            re.remove(re.size() - 1);
        }
    }
    return null;
}
</code></pre><h3 id="判断是否符合题目要求"><a href="#判断是否符合题目要求" class="headerlink" title="判断是否符合题目要求"></a>判断是否符合题目要求</h3><pre><code>private String judge_Sum(int[] res, int size) {
    String str = &quot;&quot;;
    int[] sum = new int[size * 2 + 2];
    int[][] solu = new int[size][size];
    // 判断，打印结果
    for (int j = 0; j &lt; size; j++) {
        for (int k = 0; k &lt; size; k++) {
            solu[j][k] = res[j * size + k];
        }
    }
    sum[2 * size] = 0;
    sum[2 * size + 1] = 0;
    for (int j = 1; j &lt;= size; j++) {  
        sum[j - 1] = 0;
        sum[size + j - 1] = 0;
        sum[2 * size] += solu[j - 1][j - 1];
        sum[2 * size + 1] += solu[j - 1][size - j];  
        for (int k = 0; k &lt; size; k++) { 
            sum[j - 1] += solu[j - 1][k];
            sum[size + j - 1] += solu[k][j - 1];
        }
    }
    for (int j = 1; j &lt; sum.length; j++) {
        if (sum[j-1] != sum[j]) {
            return &quot;&quot;;
        }
    }
    str += &quot;Solution: \n&quot;;
    for (int j=0; j&lt;size; j++) {
        for (int k=0; k&lt;size; k++) {
            str += solu[j][k] + &quot;\t&quot;;
        }
        str+=&quot;\n&quot;;
    }
</code></pre><p>穷举搜索的两个主要困难：</p>
<ol>
<li>产生所有可能解的机制。 本文中幻方的可能解会形成一种具备良好结构的集合——全排列。但是有许多问题，可能解无法形成具有规则结构的集合。</li>
<li>需要生成和处理的可能解数量。一般，该集合的规模会随着问题规模呈指数增长。所以，穷举搜索只能再规模很小的情况下可行。</li>
</ol>
<p>源码见<a href="https://github.com/DanVane/Algorithms/blob/master/Exhaustivity.java" target="_blank" rel="external">Exhaustivity</a>.</p>
<p>参见 《算法谜题》1.1.1穷举搜索</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[雨]]></title>
      <url>https://danvane.github.io/2016/09/28/%E9%9B%A8/</url>
      <content type="html"><![CDATA[<p><img src="/2016/09/28/雨/jimingsi.jpg" alt=""><br>浓重的夜色中，雨珠就那么倾斜着落了下来。时近凌晨，刚刚熄了灯，我侧身躺在床上，却没有分毫睡意，于是静静地听起窗外雨落金盘的声音。</p>
<p>“敲成玉磬穿林响，忽作玻璃碎地声。”前几日各地雪花飘落，听说南京已是积成了几十公分厚度，我家这却没有那样，落地的雪花随即化了，没有形成银白世界。倒是这雨珠，淅淅沥沥缠缠绵绵了好几日，加上那刺骨的风，直直地逼得人冷静下来。<br><a id="more"></a><br>我在床上，思路越发清晰。外面风声雨声交杂，清晰地回响在耳中，有点“大珠小珠落玉盘”的意味。随着这雨声更迭，一股清凉缓缓地流进了心间。我浑然觉得百无聊赖，没什么事情好想好做，便细细地忆起曾经背过吟过的那些写在风雨中的诗句了。</p>
<p>“好雨知时节，当春乃发生。随风潜入夜，润物细无声。”杜甫的《春夜细雨》许是最让人记忆深刻的名句了。这诗，我应当是小学二年级时学到的吧，那时的语文课本还是带拼音的。年轻靓丽的老师站在讲台上，手上还拿着把戒尺，一句一句地领读着。她念一句，我们跟着念一句，有甚者还摇头晃脑。老师领读完毕后，就是自由诵读时间了。我们于是一边看拼音，一边看书上的楷体汉字，情绪激昂地一字一字念着。看到旁边同学点头晃脑，自己便有样学样，电视里的学究不都是这样吗？搞学问、有大知识的人摇着晃着念书才有味道呢！老师是师范大学毕业的，刚刚走上工作岗位，又水嫩又娇俏，在我们这群农村孩子眼中，倒和天仙儿一样。小孩子没见过大世面，只是在亲朋好友的逗笑下，立着一个个“清华”、“北大”、“复旦”的理想，做着一个个“科学家”、“宇航员”、“大作家”的梦想。</p>
<p>“黑云翻墨未遮山，白雨跳珠乱入船”、“夜阑卧听风雨声，铁马冰河入梦来”，初中时代的雨带着点忧伤，又有些豪情。十四五岁的孩子，脸上的痘痘如雨后的春笋，一茬一茬地冒了出来。村里的大人们希望孩子将来有出息，纷纷将娃儿们送到城里去读书。城市和农村可是不一样的，这里有夜市、霓虹灯，街旁的商店也比乡间多了几倍，大了几倍。很多家庭在学校旁租住了房子。早晨，草叶子上的露珠还未低落时，孩子们从出租屋里出发；夜晚，街道灯散发着幽幽的黄色光芒，才刚放学的初三学生们才匆匆往家里赶。碰上下雨的周末，我总爱静静地站在窗前，看雨珠在玻璃上砸出一个又一个水点子。站了许久，直到小腿麻木才走进屋里，怅惘地捧起课本，温习学到的知识。犹记得中考那段日子，雨瓢泼似的洒落，一刻也不曾停歇。每每穿着干爽的衣服从家里出发，到了学校却成了湿漉漉地。没有办法，只能将就着将试卷做完。这衣服，到了家就立即换下好了。</p>
<p>“黄梅时节家家雨，青草池塘处处蛙”，这是高中时做过的一首古诗理解。当时便爱上了这首诗，下两句“有约不来过夜半，闲敲棋子落灯花”和红楼梦中“宝鼎茶闲烟尚绿，幽窗棋罢指尤凉”有异曲同工之妙。那份悠哉，那份闲适，是我们这群埋首层层叠叠的试卷中的少年无法享受的。班主任是个高高瘦瘦的青年，戴着一副金丝框的眼镜，教语文的，听说是我们高中十大美男教师之一。这我倒是不关注，不过学文学的人似乎都有些吸引人的共性，浑身透着一股儒雅。他喜欢对我们说“你们将来有能力了，务必要在自己家中建一个书库，一排排书架，整齐地放些书，即便不读，就是看看也是赏心悦目的。”讲这些话时，他的身体会不自觉地前倾，眼睛也会睁得大大地。我想，要不是讲台拦着，这位先生怕是要拉着我们的手促膝长谈了。会心一笑，建一个属于自己的书库却也成了心里的牵挂。后来这位先生不幸得了胃癌，虽然切除了胃形体愈发消瘦，不过能护住命也是个有福的。凌先生，祝你未来越来越好。</p>
<p>大学生涯还未结束，这里的雨却是听了三年。每次听，都别有一份心境和风味。要用一句诗概括所有的心情怕是不能够的，如果非要的话，那便是“小楼一夜听春雨，深巷明朝卖杏花了”。南京是六朝古都，被山围着，被水绕着，一落雨，便是涔涔玲玲的。雨珠先是从九重天上跳落，接着在修长的叶片滑梯上滑下一段距离，最后才坠进树旁的湖水里。“南朝四百八十寺，多少楼台烟雨中”真真地把此情此景绘了出来。接着，在雨刚停之际，街上便出现了卖花的婆婆。当然，这些场景，除了在诗句中或是在影视作品中能偶尔见之，现实生活许是再也见不到了。进步总是需要一些代价的，就像西方工业化的发展必然地使小作坊越来越难以维持。成长也是先要付出的，就像大三的我们，不再幻想王子公主，不再奢求一夜成名……不再做任何无谓的梦想。曾经在三号路上走时，听见旁边的同学议论着房贷车贷工资简历，会心一笑，飘然而去。</p>
<p>雨还在下着，间或伴着雷声。有时窗外会突然亮一下，是闪电了。不知这雨会不会在今夜停下，睡意已有，怕是自己不能亲身验证了。离屋子50米的地方是高速公路，十几年前建好了的。当年建它的时候，我和村里一群孩子还天天跑上去玩耍。十几年后，却是这高速公路，带我离开宁静的村庄，来到另一片需要自己打拼的天地。</p>
<p>可是，这并没有什么好怕的，雨终究会停，希望终会降临。</p>
<h3 id="后记​"><a href="#后记​" class="headerlink" title="后记​"></a>后记​</h3><p>仅以此缅怀我从小学至今的或快乐、或悲伤，时而敏锐，时而愚钝的日子。</p>
<p>2014/3/20</p>
<h3 id="在后记之后"><a href="#在后记之后" class="headerlink" title="在后记之后"></a>在后记之后</h3><p>​这是大三时写的文章，距今已有两年。如今在一个不爱下雨的城市过无雨的清明；思绪歇罢，更忆江南的清新明丽。文中的凌先生已于16年初离世，“沤灭全归海，花开正满枝”。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[胡思乱想]]></title>
      <url>https://danvane.github.io/2016/09/28/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>雪花夹着雨水从千里之外的天空坠落，像是有着音乐天赋的天使，在泥泞的田埂上、灰色的石板路上、暗色调的柏油路上砸出“沙沙”的声响。憔悴沧桑的河面晕出了点点涟漪，却掩盖不住水位低沉的尴尬。各色汽车从高速公路上倐的一声闪过，给宁静的农村带来些不协调的音色。</p>
<p>真是冷啊！秦岭淮河一带是最冻人的，往南便是四季如春的热带，向北就有南方孩子没见过的暖气。唯有这里，被温暖抛弃了。<br><a id="more"></a><br>人是一种会自寻烦恼的动物，遗憾着过去且困惑于未来。对于一个正在上大三，面临着几种生存模式选择的学生来说，过去半年以及未来半年的每一天都是敏感的。“在家里待久了，就觉得无聊了。学生想去上学，社会人想去工作。”可是，那些即将踏进社会圈尚未踏进社会圈的人们，该怎么办呢？<br>未来，不过就是这几种选择：出国、读研、工作。可不管走哪一条路，最终的目的地都是工作。殊途同归罢了。</p>
<p>半年前，我尚有着清晰的目标：出国。似乎远方的天空更蓝，远方的水更清澈，远方的花更娇艳，远方的风儿带着一股子甜味儿……我满心憧憬着对于远方的美好幻想。家里人似乎更倾向于考研这条路，经常对我说：“现在大学生满地都是，不考研究生如何找个好工作？”</p>
<p>我的面前放着一份考卷，只有一道题：未来。我尚且无法作答，我的每一个神经元、我敲打的每一个字符、我听见的每一道声音，都被一个基础性的问题充满着：在计算机上走下去？这几个晚上，我辗转反侧，脑子里一团糨糊，心里空荡荡的。思来想去，只有一个答案，我不可能在计算机上花费一辈子。就连老师都说，计算机是吃青春饭的。“长江后浪推前浪，一代新人胜旧人”……我已经被困惑和担忧埋葬了。</p>
<p>25岁的姑姑当年在云南大学读的书，毕了业就出来工作了，现在在新街口上班，小职员一枚，租住的房子在浦口，每天上下班需要先乘公交过江，再挤上地铁。我问她为什么不租个近点的房子。她无奈地说：“我也想啊，可贵啊，租不起。”那天从浦口回学校时，我在地铁站坐了半小时，看着走走停停的地铁，看着上上下下的人群，迷茫了。小姨夫曾开我玩笑说：“你们大学生就是喜欢在象牙塔中钻牛角尖。”</p>
<p>(2014-02-18)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[爱雨]]></title>
      <url>https://danvane.github.io/2016/09/28/%E7%88%B1%E9%9B%A8/</url>
      <content type="html"><![CDATA[<p><img src="/2016/09/28/爱雨/bashanyeyu.jpg" alt=""><br>印象中的雨大抵可分为五个品级：微风燕子斜、溪头伴钓翁、芭蕉先有声、栖鸟就檐息、九陌成泥海。译成大白话，便是微雨、初雨、中雨、大雨与暴雨。</p>
<p>这个时节，是属于雨的。于清明始，南国的雨便不停歇了。我最是爱雨的，墨黑中透着些微光亮的云，风中腾挪反复的枝丫，坎坎荡荡的涟漪，和自九重天外坠来的清贵之气。<br><a id="more"></a>  </p>
<p>古人多有爱雨之人，诗篇流传吟诵自不必多言。二余先生所著《听听那冷雨》、《夜雨诗意》这两篇文章倒真真是得我喜爱。雨声多带来寂寥，带来脆弱与绵长的思念。此中真情流转，最有魄人之美。</p>
<p>“何当共剪西窗烛，却话巴山夜雨时”，许是上辈子从未剪过西窗烛，从未话过巴山雨，这辈子便与这句话有了难舍难分的纠缠。用不着说清，用不着道明。只念一念，想一想，便痛到鼻头酸涩。</p>
<p>今早落了场雨，想想，算是我和北京春雨的第一次会晤。</p>
<p>撑伞于楼下立了会儿，只觉得和南国之雨分外不同。用“冷绝”形容北雨颇为贴切。不似微雨的缠绵，又比初雨少些柔情，比不上中雨的庸常、大雨的凌厉和暴雨的盛怒。这场北雨，介于小雨和中雨之间，遗世而独立，冷艳绝来人。</p>
<p>(2016-04-13)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[朋友的小故事]]></title>
      <url>https://danvane.github.io/2016/09/28/%E6%9C%8B%E5%8F%8B%E7%9A%84%E5%B0%8F%E6%95%85%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>在这个单身狗的节日里，记下朋友的爱情片段。</p>
<p>收到朋友从南京寄来的礼物，很开心！</p>
<p>已经有大半年没有见到朋友了。最近一次相见是毕业季，朋友来学校，言谈之间告诉我：脱单了！</p>
<p>当时很震惊，除了这种事情竟然没有第一时间告诉我的小小的恼怒，更多的是她的暗恋有了美好的结果的喜悦。</p>
<p>朋友很挑，当然，她也有挑的资本。（这种人竟然是我的朋友！）眼光太高是朋友长久保持单身族的重要原因。很久很久以前，我们就有共识：实在不行就搭伙过日子算了。我们可以一起逛街、一起看片、一起吐槽、一起做白日梦，一起到处旅游，一起去博物馆，把时间和精力花费在自由上。然后，朋友就找到了男票。嗯，作为朋友的朋友，我得说，眼光不错哦，小姑娘蛮有胆量的嘛！<br><a id="more"></a><br>朋友有了男票后，我们联系就少了。当然，这主要是地域与时间的原因。她在南京时，我在泰州；她还在南京时，我去了北京。而我们的时间又被其他事情占了过去。</p>
<p>有一天，朋友打来了电话，没有说话，就一个劲儿地哭。我嘴笨，只能说：你先哭着吧，我听着呢，你哭完咱再好好说话。朋友说：他都不理我！他是不是不喜欢我！</p>
<p>作为一个理性之上没有感情经历的单身狗，我只想说：呃。。。（此处省略无数呃。。。）我说：要不你给他打个电话吧，咱跟他把事儿说清楚。如果他喜欢你，那就继续好着；如果不，那咱也别浪费时间了，天涯何处无芳草？<br>朋友一通电话过去，我又孤单了。</p>
<p>又一天，朋友发来语音，我分手了。很平静的一句话，以至我当时以为朋友在开玩笑。你那么喜欢他，分手你不哭不闹还平静地跟我聊天？！好吧，朋友回归了单身状态，真好！朋友说：我没有感受到被宠爱的感觉，觉得这段感情很累，不想坚持了。</p>
<p>不想坚持就放弃吧，不管怎样，我还在呀，虽然不在你身边。</p>
<p>单身真好！</p>
<p>这段对话后的第三天，朋友又发来消息：我原谅他了！</p>
<p>你喜欢就好，既然原谅了，就好好地在一起吧！</p>
<p>虽然朋友终究还是和自己喜欢的人在一起了，但我真得很想知道我当时的心理阴影面积！</p>
<p>朋友在我的大学阶段留下了非常深刻的记忆。</p>
<p>今早签收快递时看到快递单上的字。孤独感瞬间产生，顿时有种“众里寻她千百度”的感觉，恍惚间发现原来已经好久没见朋友了，不知道过年时能不能一聚。</p>
<p>在这个单身狗的节日里，记下朋友的爱情片段。</p>
<p>（2015-11-11）</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对话]]></title>
      <url>https://danvane.github.io/2016/09/28/%E5%AF%B9%E8%AF%9D/</url>
      <content type="html"><![CDATA[<p><img src="/2016/09/28/对话/xiaozhupeiqi.jpg" alt=""><br>我：你再不听话，我就让警察叔叔把你抓走！</p>
<p>妹妹：哼，警察叔叔才不抓我呢！警察叔叔是我的好朋友，不是你的好朋友！</p>
<p>##<br>我：宝宝打针哭了呢！</p>
<p>妹妹：宝宝没有哭，蓉蓉（表妹）哭了。宝宝打针就不生病了。<br><a id="more"></a> </p>
<p>##<br>妈：我不需要瓜子脸。</p>
<p>我：当然，你已经找到老公了。</p>
<p>妈：你嫁不出去才好呢，在家陪我。</p>
<p>我：那行啊，你养我一辈子。</p>
<p>妈：我养不了你一辈子。</p>
<p>我：那你养我上半辈子，我妹养我下半辈子。</p>
<p>妈：也行。</p>
<p>##<br>妈：昨天你叔叔给你200，我收了。</p>
<p>我：那你给我呀。</p>
<p>妈：被我用掉了。</p>
<p>我：。。。</p>
]]></content>
    </entry>
    
  
  
</search>
